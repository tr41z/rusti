name: "publish"

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
          - platform: "ubuntu-22.04"
            args: "--target armv7-unknown-linux-gnueabihf"
          - platform: "windows-latest"
            args: "--target x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Install Rust and add required targets
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.platform == 'ubuntu-22.04' && 'aarch64-unknown-linux-gnu,armv7-unknown-linux-gnueabihf' || '' }}
            ${{ matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || '' }}

      # Install Linux-specific dependencies
      - name: Install dependencies (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            libc6-dev-arm64-cross \
            libglib2.0-dev:armhf \
            libglib2.0-dev:arm64

      # Configure pkg-config for ARM cross-compilation
      - name: Configure pkg-config for ARM (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          export PKG_CONFIG_ALLOW_CROSS=1
          if [[ "${{ matrix.args }}" == *"armv7-unknown-linux-gnueabihf"* ]]; then
            export PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig
          elif [[ "${{ matrix.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          fi

      # Install Rust for Windows (if required)
      - name: Install Rust for Windows
        if: runner.os == 'Windows'
        run: rustup target add x86_64-pc-windows-msvc

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: yarn install

      # Extract version from src-tauri/tauri.conf.json
      - name: Extract version
        id: version
        run: echo "VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      # Build and publish the app
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        with:
          tagName: "rusti-v${{ env.VERSION }}"
          releaseName: "rusti v${{ env.VERSION }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
